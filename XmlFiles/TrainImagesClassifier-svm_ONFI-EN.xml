<root>
  <key>TrainImagesClassifier-svm</key>
  <exec>otbcli_TrainImagesClassifier</exec>
  <longname>1b - Train SVM Image Classifier</longname>
  <group>1 - Classification</group>
  <description>Train a classifier from multiple pairs of images and training vector data.</description>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_InputImageList">ParameterMultipleInput</parameter_type>
    <key>io.il</key>
    <name>Input Image file</name>
    <description>A list of input images.</description>
    <datatype />
    <optional>False</optional>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_InputVectorDataList">ParameterMultipleInput</parameter_type>
    <key>io.vd</key>
    <name>Input Region Of Interest Vector file</name>
    <description>A list of vector data to select the training samples.</description>
    <datatype />
    <optional>False</optional>
  </parameter>
    <parameter>
    <parameter_type source_parameter_type="ParameterType_String">ParameterString</parameter_type>
    <key>sample.vfn</key>
    <name>Field Name containing the classes id (must be Integer or Float)(must be Integer or Float)</name>
    <description>Name of the field used to discriminate class labels in the input vector data files.</description>
    <default>ToChange</default>
    <multiline />
    <optional>False</optional>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_InputFilename">ParameterFile</parameter_type>
    <key>io.imstat</key>
    <name>Input XML image statistics file</name>
    <description>Input XML file containing the mean and the standard deviation of the input images.</description>
    <isFolder />
    <optional>False</optional>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_OutputFilename">OutputFile</parameter_type>
    <key>io.confmatout</key>
    <name>Output confusion matrix (add .csv extension)</name>
    <description>Output file containing the confusion matrix (.csv format).</description>
    <hidden />
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_OutputFilename">OutputFile</parameter_type>
    <key>io.out</key>
    <name>Output model  (add .txt extension).</name>
    <description>Output file containing the model estimated (add .txt extension).</description>
    <hidden />
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Choice">*ParameterSelection</parameter_type>
    <key>classifier</key>
    <name>Classifier to use for the training</name>
    <description>Choice of the classifier to use for the training.</description>
    <options>
      <choices>
        <choice>libsvm</choice>
        </choices>
    </options>
    <default>0</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Choice">*ParameterSelection</parameter_type>
    <key>classifier.libsvm.k</key>
    <name>SVM Kernel Type</name>
    <description>SVM Kernel Type.</description>
    <options>
      <choices>
        <choice>rbf</choice>
      </choices>
    </options>
    <default>0</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Empty">*ParameterBoolean</parameter_type>
    <key>classifier.libsvm.opt</key>
    <name>Parameters optimization</name>
    <description>SVM parameters optimization flag.
-If set to True, then the optimal SVM parameters will be estimated. Parameters are considered optimal by OpenCV when the cross-validation estimate of the test set error is minimal. Finally, the SVM training process is computed 10 times with these optimal parameters over subsets corresponding to 1/10th of the training samples using the k-fold cross-validation (with k = 10).
-If set to False, the SVM classification process will be computed once with the currently set input SVM parameters over the training samples.
-Thus, even with identical input SVM parameters and a similar random seed, the output SVM models will be different according to the method used (optimized or not) because the samples are not identically processed within OpenCV.</description>
    <default>True</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Empty">*ParameterBoolean</parameter_type>
    <key>classifier.libsvm.prob</key>
    <name>Probaability Estimate</name>
    <description>Probability estimation.</description>
    <default>True</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Int">*ParameterNumber</parameter_type>
    <key>rand</key>
    <name>set user defined seed (DON'T CHANGE)</name>
    <description>Set specific seed. with integer value.</description>
    <minValue />
    <maxValue />
    <default>1</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Int">*ParameterNumber</parameter_type>
    <key>sample.bm</key>
    <name>Bound sample number by minimum</name>
    <description>Bound the number of samples for each class by the number of available samples by the smaller class. Proportions between training and validation are respected. Default is true (=1).</description>
    <minValue />
    <maxValue />
    <default>0</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Int">*ParameterNumber</parameter_type>
    <key>sample.mt</key>
    <name>Maximum training sample size per class</name>
    <description>Maximum size per class (in pixels) of the training sample list (default = 1000) (no limit = -1). If equal to -1, then the maximal size of the available training sample list per class will be equal to the surface area of the smallest class multiplied by the training sample ratio.</description>
    <minValue />
    <maxValue />
    <default>500</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Int">*ParameterNumber</parameter_type>
    <key>sample.mv</key>
    <name>Maximum validation sample size per class</name>
    <description>Maximum size per class (in pixels) of the validation sample list (default = 1000) (no limit = -1). If equal to -1, then the maximal size of the available validation sample list per class will be equal to the surface area of the smallest class multiplied by the validation sample ratio.</description>
    <minValue />
    <maxValue />
    <default>500</default>
  </parameter>
  <parameter>
    <parameter_type source_parameter_type="ParameterType_Float">*ParameterNumber</parameter_type>
    <key>sample.vtr</key>
    <name>Training and validation sample ratio</name>
    <description>Ratio between training and validation samples (0.0 = all training, 1.0 = all validation) (default = 0.5).</description>
    <minValue />
    <maxValue />
    <default>0.5</default>
  </parameter>
</root>
